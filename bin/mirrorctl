#!/usr/bin/python3
# This file is part of Propagator, a KDE Sysadmin Project
#
#   Copyright (C) 2015-2016 Boudhayan Gupta <bgupta@kde.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of KDE e.V. (or its successor approved by the
#    membership of KDE e.V.) nor the names of its contributors may be used
#    to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from datetime import datetime

import socket
import os
import sys
import argparse

# propagator daemon server details, and client log path

SERVER_ADDR = "::1"
SERVER_PORT = 58192
CLIENT_LOGF = os.environ.get("GATOR_MIRRORCTL_LOG", os.path.expanduser("~/.propagator/mirrorctl.log"))

# utility functions

def LogAction(message, iserror, verbose):

    # if verbose mode is enabled and not an error, print to stdout
    if (not iserror) and (verbose):
        print(message)

    # if error, print to stderr
    if (iserror):
        print(message, file = sys.stderr)

    # always log to the logfile. create path first if not exists
    logpath = os.path.dirname(CLIENT_LOGF)
    if not os.path.isdir(logpath):
        os.makedirs(logpath, 0o755, True)

    # and write the logline
    with open(CLIENT_LOGF, "a") as f:
        logline = "{0} | {1}\n".format(datetime.now().strftime("%Y-%m-%d %k:%M:%S"), message)
        f.write(logline)

def SendCommand(cmd, verbose = True):

    # initialise socket to connect to propagator daemon
    clientSocket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
    clientSocket.settimeout(5)

    # try to connect to propagator daemon
    try:
        clientSocket.connect((SERVER_ADDR, SERVER_PORT))
    except Exception as exc:
        LogAction("FATAL: Failed to connect to Propagator Daemon. The error was: {0}".format(str(exc)), True, verbose)
        sys.exit(1)

    # send our computed command
    try:
        clientSocket.sendall(cmd.encode())
    except Exception as exc:
        LogAction("FATAL: Could not send command to Propagator Daemon. The error was: {0}".format(str(exc)), True, verbose)
    finally:
        clientSocket.close()
    LogAction("Command sent to Propagator Daemon: {0}".format(cmd.strip()), False, verbose)

def ComputeCommand(results):

    cmd = results.command.lower()
    if cmd == "create":
        return "CREATE {0}\r\n".format(results.name)
    elif cmd == "update":
        return "UPDATE {0}\r\n".format(results.name)
    elif cmd == "create":
        return "DELETE {0}\r\n".format(results.name)
    elif cmd == "rename":
        return "RENAME {0} {1}\r\n".format(results.source, results.destination)
    else:
        return None

def SanityCheck(repo):

    # TODO: basic sanity checking - check that the repo exists
    return True

def ParseArguments():

    # create our main parser
    parser = argparse.ArgumentParser(prog = "mirrorctl")
    parser.add_argument("-q", "--quiet", action = "store_true", help = "don't display any output when no errors are encountered")
    subparsers = parser.add_subparsers(dest = "command")

    # subparser for repo creation
    pCreate = subparsers.add_parser("create", help = "create repos on mirrors for already existing repo on the master server")
    pCreate.add_argument("name", type = str, help = "the name of the repo to create, without path, with trailing .git")

    # subparser for repo rename
    pRename = subparsers.add_parser("rename", help = "rename a repo on all mirrors")
    pRename.add_argument("source", type = str, help = "the source repo, without path, with trailing .git")
    pRename.add_argument("destination", type = str, help = "the destination repo, without path, with trailing .git")

    # subparser for repo update
    pUpdate = subparsers.add_parser("update", help = "push updates to all repo mirrors")
    pUpdate.add_argument("name", type = str, help = "the repo to update, without path, with trailing .git")

    # subparser for repo delete
    pDelete = subparsers.add_parser("delete", help = "delete a repo on all mirrors")
    pDelete.add_argument("name", type = str, help = "the repo to delete, without path, with trailing .git")

    # parse all arguments
    results = parser.parse_args()

    # if invalid or no subcommand was supplied, the invocation is invalid
    if not results.command or results.command.lower() not in ("create", "rename", "update", "delete"):
        parser.print_help()
        sys.exit(1)

    # return the parse results
    return results

if __name__ == "__main__":

    # run the argument parser
    results = ParseArguments()
    verbose = not results.quiet

    # check the the repo exists and is valid
    if not SanityCheck(results.name):
        LogAction("FATAL: \"{0}\" either does not exist or is not a valid repository".format(results.name), True, verbose)
        sys.exit(1)

    # compute the command and send it
    command = ComputeCommand(results)
    SendCommand(command, verbose)

    # done
    sys.exit(0)
